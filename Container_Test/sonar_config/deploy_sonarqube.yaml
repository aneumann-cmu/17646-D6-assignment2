---
- name: Deploy Jenkins with Configuration as Code
  hosts: localhost
  become: true

  vars:
    SONAR_URL: "http://127.0.0.1:8080"
    SONAR_USERNAME: "admin"
    SONAR_PASSWORD: "password"

  tasks: 

    - name: Sleep for 30 seconds
      wait_for:
        timeout: 30
      delegate_to: localhost

---
- name: Deploy and configure SonarQube
  hosts: localhost
  gather_facts: false
  vars:
    SONARQUBE_URL: "http://127.0.0.1:9000"
    SONARQUBE_ADMIN_USERNAME: "admin"
    SONARQUBE_ADMIN_PASSWORD: "password"

  tasks:
    - name: Wait for SonarQube to be up
      uri:
        url: "{{ SONARQUBE_URL }}/api/system/status"
      register: sonarqube_status
      until: sonarqube_status.json.status == "UP"
      retries: 60
      delay: 10
      when: sonarqube_status.status != 200

    - name: Set SonarQube admin password
      uri:
        url: "{{ SONARQUBE_URL }}/api/users/change_password"
        method: POST
        user: "{{ SONARQUBE_ADMIN_USERNAME }}"
        password: "{{ SONARQUBE_ADMIN_PASSWORD }}"
        body_format: json
        body:
          login: "{{ SONARQUBE_ADMIN_USERNAME }}"
          previousPassword: "{{ SONARQUBE_ADMIN_PASSWORD }}"
          password: "{{ SONARQUBE_ADMIN_PASSWORD }}"
      register: result_set_password
      failed_when: result_set_password.status != 200

    - name: Create SonarQube user token
      uri:
        url: "{{ SONARQUBE_URL }}/api/user_tokens/generate"
        method: POST
        user: "{{ SONARQUBE_ADMIN_USERNAME }}"
        password: "{{ SONARQUBE_ADMIN_PASSWORD }}"
        body_format: json
        body:
          name: "JenkinsTokenForSonarQube"
          login: "{{ SONARQUBE_ADMIN_USERNAME }}"
          type: "GLOBAL_ANALYSIS_TOKEN"
      register: result_create_token
      failed_when: result_create_token.status != 200
    
    - name: Create SonarQube User Token
          uri:
            url: "{{ SONARQUBE_URL }}/api/user_tokens/generate"
            method: POST
            user: "{{ SONARQUBE_ADMIN_USERNAME }}"
            password: "{{ SONARQUBE_ADMIN_PASSWORD }}"
            body_format: form-urlencoded
            body:
              name: JenkinsTokenForSonarQube
              login: admin
              type: GLOBAL_ANALYSIS_TOKEN
          register: sonarqube_token_result

        - name: Extract SonarQube Token
          set_fact:
            SONARQUBE_TOKEN: "{{ sonarqube_token_result.json.token }}"

    - name: Create Petclinic project in Sonarqube
      uri:
        url: "{{ SONARQUBE_URL }}/api/projects/create"
        method: POST
        user: "{{ SONARQUBE_ADMIN_USERNAME }}"
        password: "{{ SONARQUBE_ADMIN_PASSWORD }}"
        body_format: form-urlencoded
        body:
          project: petclinic
          name: petclinic
          projectVisibility: public
      register: result

